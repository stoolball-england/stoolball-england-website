<?php
require_once('http/has-short-url.interface.php');
require_once ('markup/xhtml-markup.class.php');
require_once("permission-collection.class.php");
  
class User implements IHasShortUrl
{
	private $i_id;
	private $s_name;
	private $s_first_name;
	private $s_last_name;
	private $s_email;
	private $i_sign_up_date;
	private $date_changed;
	private $last_sign_in_date;
	private $total_sign_ins;
	private $i_total_messages;
	private $s_last_message = '';
	private $s_password;
	private $s_password_confirmation;
	private $b_auto_sign_in;
	private $requested_email;
	private $requested_email_hash;
	private $requested_password;
	private $password_reset_token;
	private $password_reset_request_date;
	private $roles = null;
	private $account_activated = null;
    private $account_disabled = false;
    private $permissions;
    private $salt;
	private $short_url;

	/**
	 * Creates a new User
	 *
	 * @param int $id
	 * @param string $s_name
	 */
	public function __construct($id = null, $s_name = '')
	{
		if ($id)
			$this->SetId($id);
		if ($s_name)
			$this->SetName($s_name);
        
        $this->permissions = new PermissionCollection();  
	}

	/**
	 * @return void
	 * @param int $i_input
	 * @desc Sets the unique database identifier for the person
	 */
	function SetId($i_input)
	{
		$this->i_id = (int)$i_input;
	}

	/**
	 * @return int
	 * @desc Get the unique id of the person generated by the database
	 */
	function GetId()
	{
		return $this->i_id;
	}

	/**
	 * @return void
	 * @param string $s_input
	 * @desc Sets the given name of the person
	 */
	function SetFirstName($s_input)
	{
		if (is_string($s_input))
			$this->s_first_name = trim($s_input);
	}

	/**
	 * @return string
	 * @desc Gets the given name of the person
	 */
	function GetFirstName()
	{
		return $this->s_first_name;
	}

	/**
	 * @return void
	 * @param string $s_input
	 * @desc Sets the family name of the person
	 */
	function SetLastName($s_input)
	{
		if (is_string($s_input))
			$this->s_last_name = trim($s_input);
	}

	/**
	 * @return unknown
	 * @desc Gets the family name of the person
	 */
	function GetLastName()
	{
		return $this->s_last_name;
	}

	/**
	 * @return void
	 * @param string $s_input
	 * @desc Sets the email address the person is registered with
	 */
	function SetEmail($s_input)
	{
		$this->s_email = trim((string)$s_input);
	}

	/**
	 * @return string
	 * @desc Gets the email address the person is registered with
	 */
	function GetEmail()
	{
		return $this->s_email;
	}

	/**
	 * @return void
	 * @param string $s_input
	 * @desc Sets the screen name the person is known as
	 */
	function SetName($s_input)
	{
		$this->s_name = (string)$s_input;
	}

	/**
	 * @return string
	 * @desc Gets the screen name the person is known as
	 */
	public function GetName()
	{
		return ($this->s_name) ? $this->s_name : $this->GetRealName();
	}

	/**
	 * @return string
	 * @desc Gets the screen name the user is known as, or "you" for the current user
	 */
	public function GetRelativeName()
	{
		if ($this->GetId() and $this->GetId() == AuthenticationManager::GetUser()->GetId())
			return "you";
		else
			return $this->GetName();
	}

	function GetRealName()
	{
		# concatenate and remove extra spaces
		$s_full_name = $this->GetFirstName() . ' ' . $this->GetLastName();
		$s_full_name = str_replace('  ', ' ', $s_full_name);
		$s_full_name = trim($s_full_name);

		return $s_full_name;
	}

	function GetFriendlyName()
	{
		if ($this->s_name and ($this->s_name != $this->GetRealName()))
		{
			return $this->s_name;
		}
		else
			return $this->GetFirstName();
	}

	/**
	 * @return string
	 * @desc Gets a version of the name used to control a sort order
	 */
	function GetSortName()
	{
		$s_name = $this->GetName();
		$s_name = preg_replace("/[()\/,'-]/i", '', $s_name);
		$s_name = preg_replace("/^(The|A) /i", '', $s_name);
		$s_name = str_replace('  ', ' ', $s_name);

		return $s_name;
	}

	/**
	 * Gets the URL to edit the user
	 */
	public function GetEditUserUrl()
	{
		return "/users/" . $this->GetId() . "/edit/";
	}

	/**
	 * @return void
	 * @param string $s_input
	 * @desc Sets the email address the person would like to have as a username
	 */
	public function SetRequestedEmail($s_input)
	{
		$this->requested_email = trim((string)$s_input);
	}

	/**
	 * @return string
	 * @desc Gets the email address the person would like to have as a username
	 */
	public function GetRequestedEmail()
	{
		return $this->requested_email;
	}

	/**
	 * @return void
	 * @param string $s_input
	 * @desc Sets the hash used to confirm a requested change of email address
	 */
	public function SetRequestedEmailHash($s_input)
	{
		$this->requested_email_hash = (string)$s_input;
	}

	/**
	 * @return string
	 * @desc Gets the hash used to confirm a requested change of email address
	 */
	public function GetRequestedEmailHash()
	{
		return $this->requested_email_hash;
	}

	/**
	 * Gets the relative URL to confirm a change of email address, if one has been requested
	 */
	public function GetRequestedEmailConfirmationUrl()
	{
		return '/you/e.php?p=' . $this->GetId() . '&c=' . urlencode($this->GetRequestedEmailHash());
	}

	/**
	 * @return void
	 * @param string $s_input
	 * @desc Sets the unencrypted password used to sign in
	 */
	public function SetPassword($s_input)
	{
		$this->s_password = (string)$s_input;
	}

	/**
	 * @return string
	 * @desc Gets the unencrypted password used to sign in
	 */
	public function GetPassword()
	{
		return $this->s_password;
	}

	/**
	 * @return void
	 * @param string $s_input
	 * @desc Sets the new unencrypted password used to sign in
	 */
	public function SetRequestedPassword($s_input)
	{
		$this->requested_password = (string)$s_input;
	}

	/**
	 * @return string
	 * @desc Gets the new unencrypted password used to sign in
	 */
	public function GetRequestedPassword()
	{
		return $this->requested_password;
	}

	/**
	 * @return void
	 * @param string $s_input
	 * @desc Sets the confirmation copy of the unencrypted password used to sign in
	 */
	function SetPasswordConfirmation($s_input)
	{
		$this->s_password_confirmation = (string)$s_input;
	}

	/**
	 * @return string
	 * @desc Gets the confirmation copy of the unencrypted password used to sign in
	 */
	function GetPasswordConfirmation()
	{
		return $this->s_password_confirmation;
	}

	/**
	 * Sets the token used to confirm a password reset request
	 * @param string $token
	 */
	public function SetPasswordResetToken($token)
	{
		$this->password_reset_token = (string)$token;
	}

	/**
	 * Gets the token used to confirm a password reset request
	 */
	public function GetPasswordResetToken()
	{
		return $this->password_reset_token;
	}

	/**
	 * Sets the date the user requested a password reset
	 * @param int $timestamp
	 */
	public function SetPasswordResetRequestDate($timestamp)
	{
		if (is_numeric($timestamp))
		{
			$this->password_reset_request_date = (int)$timestamp;
		}
	}

	/**
	 * Gets the date the user requested a password reset
	 */
	public function GetPasswordResetRequestDate()
	{
		return $this->password_reset_request_date;
	}

	/**
	 * Gets the relative URL to confirm a password reset request
	 */
	public function GetPasswordResetConfirmationUrl() 
	{
		return "/you/reset-password?request=" . urlencode($this->GetPasswordResetToken());	
	}

	/**
	 * Sets the date the user registered as a UNIX timestamp
	 * @param int $timestamp
	 */
	public function SetSignUpDate($timestamp)
	{
		if (is_numeric($timestamp))
		{
			$this->i_sign_up_date = (int)$timestamp;
		}
	}

	/**
	 * Gets the date the user registered as a UNIX timestamp
	 */
	public function GetSignUpDate()
	{
		return $this->i_sign_up_date;
	}

	/**
	 * Sets the date the user account last changed as a UNIX timestamp
	 * @param int $timestamp
	 */
	public function SetDateChanged($timestamp)
	{
		if (is_numeric($timestamp))
		{
			$this->date_changed = (int)$timestamp;
		}
	}

	/**
	 * Gets the date the user account last changed as a UNIX timestamp
	 */
	public function GetDateChanged()
	{
		return $this->date_changed;
	}

	/**
	 * Sets the date the user last signed in as a UNIX timestamp
	 * @param int $timestamp
	 */
	public function SetLastSignInDate($timestamp)
	{
		if (is_numeric($timestamp))
		{
			$this->last_sign_in_date = (int)$timestamp;
		}
	}

	/**
	 * Gets the date the user last signed in as a UNIX timestamp
	 */
	public function GetLastSignInDate()
	{
		return $this->last_sign_in_date;
	}

	/**
	 * @return void
	 * @param bool $b_input
	 * @desc Sets whether to store a cookie which automatically signs the person in
	 */
	function SetAutoSignIn($b_input)
	{
		$this->b_auto_sign_in = (bool)$b_input;
	}

	/**
	 * @return bool
	 * @desc Gets whether to store a cookie which automatically signs the person in
	 */
	function GetAutoSignIn()
	{
		return $this->b_auto_sign_in;
	}

	/**
	 * Sets the total number of times this user has signed in
	 * @param int $total
	 */
	public function SetTotalSignIns($total)
	{
		if (is_numeric($total)) {
			$this->total_sign_ins = (int)$total;
		}
	}

	/**
	 * Gets the total number of times this user has signed in
	 * @returns int
	 */
	public function GetTotalSignIns()
	{
		return $this->total_sign_ins;
	}

	/**
	 * Sets the total number of match comments by this user
	 * @param int $i_input
	 */
	public function SetTotalMessages($i_input)
	{
		if (is_numeric($i_input)) {
			$this->i_total_messages = (int)$i_input;
		}
	}

	/**
	 * Gets the total number of match comments by this user
	 * @returns int
	 */
	public function GetTotalMessages()
	{
		return $this->i_total_messages;
	}

	function SetLastMessage($s_input)
	{
		$this->s_last_message = md5($s_input);
	}

	function GetLastMessage()
	{
		return $this->s_last_message;
	}

	function MatchLastMessage($s_input)
	{
		return (md5($s_input) == $this->s_last_message);
	}

	/**
	 * @return bool
	 * @desc Gets whether the person is currently signed in to the site
	 */
	function IsSignedIn()
	{
		return $this->Permissions()->HasPermission(PermissionType::EditPersonalInfo());
	}

	/**
	 * Gets the URI which uniquely identifies this user
	 */
	public function GetLinkedDataUri()
	{
		return "https://www.stoolball.org.uk/id/user/" . $this->GetId();
	}

	/**
	 * Gets the security roles assigned to the user
	 * @return Collection
	 */
	public function Roles()
	{
		if (is_null($this->roles))
		{
			require_once ("collection.class.php");
			$this->roles = new Collection( array(), "Role");
		}
		return $this->roles;
	}

    /**
     * Sets whether this account has been activated
     * @param $activated bool
     */
    public function SetAccountActivated($activated)
    {
        $this->account_activated = (bool)$activated;
    }

    /**
     * Gets whether this account has been activated
     * @return bool
     */
    public function GetAccountActivated()
    {
        return $this->account_activated;
    }

	/**
	 * Sets whether this account has been disabled
	 * @param $disabled bool
	 */
	public function SetAccountDisabled($disabled)
	{
		$this->account_disabled = (bool)$disabled;
	}

	/**
	 * Gets whether this account has been disabled
	 * @return bool
	 */
	public function GetAccountDisabled()
	{
		return $this->account_disabled;
	}

    /**
     * Gets the security permissions granted to the user
     * @return PermissionCollection
     */
    public function Permissions() 
    {
        return $this->permissions;
    }

    /**
     * Sets the password salt for this account
     * @param $salt string
     */
    public function SetPasswordSalt($salt)
    {
        $this->salt = (string)$salt;
    }

    /**
     * Gets the password salt for this account
     * @return string
     */
    public function GetPasswordSalt()
    {
        return $this->salt;
	}
	
	/**
	 * Sets the short URL for a user
	 *
	 * @param string $s_url
	 */
	public function SetShortUrl($s_url) { $this->short_url = trim($s_url); }

	/**
	 * Gets the short URL for a user
	 *
	 * @return string
	 */
	public function GetShortUrl() { return $this->short_url; }

	/**
	 * Gets the URL to edit the user
	 */
	public function GetEditUrl() { return "/" . $this->GetShortUrl() . "/edit"; }

	/**
	 * Gets the URL to delete the user
	 */
	public function GetDeleteUrl() { return "/" . $this->GetShortUrl() . "/delete"; }
	
	/**
	 * Gets the format to use for a user's short URLs
	 *
	 * @return ShortUrlFormat
	 */
	public static function GetShortUrlFormatForType()
	{
		return new ShortUrlFormat('nsa_user', 'short_url', array('user_id'), array('GetId'),
		array(
		'{0}/edit' => '/you/edit-user.php?item={0}',
		'{0}/delete' => '/you/delete-user.php?item={0}'
		));
	}

	/**
	 * Gets the format to use for a user's short URLs
	 *
	 * @return ShortUrlFormat
	 */
	public function GetShortUrlFormat()
	{
		return User::GetShortUrlFormatForType();
	}

	
	/**
	 * Suggests a short URL to use to view the user
	 *
	 * @param int $i_preference
	 * @return string
	 */
	public function SuggestShortUrl($i_preference=1)
	{
		return "users/" . $this->GetId();
	}
}
?>